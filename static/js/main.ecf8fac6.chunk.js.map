{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","jsonInput","changejsonInput","iserror","setError","className","onSubmit","ev","myFormData","target","querySelectorAll","forEach","input","name","value","preventDefault","fetch","body","JSON","stringify","method","headers","Accept","then","res","console","log","catch","err","Object","keys","map","key","ipname","type","minvalue","undefined","min","maxvalue","max","options","op","color","style","backgroundColor","width","height","accept","extension","CorrespondingElement","length","onChange","newJson","parse","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ecf8fac6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction CorrespondingElement(key, value) {\n  let ipname = value.name ? value.name : key;\n  if (value.type === \"title\") return <div className=\"title\">{key}</div>;\n  if (value.type === \"subtitle\") return <div className=\"subtitle\">{key}</div>;\n  if (value.type === \"range\") {\n    let minvalue = value.min !== undefined ? value.min : 0;\n    let maxvalue = value.max !== undefined ? value.max : 10000;\n    return (\n      <div className=\"input_holder\">\n        <label>{key}</label>\n        <input name={ipname} min={minvalue} max={maxvalue} type=\"range\" />\n      </div>\n    );\n  }\n  if (value.type === \"select\") {\n    if (value.options)\n      return (\n        <div className=\"input_holder\">\n          <label>{key}</label>\n          <select name={ipname}>\n            {value.options.map((op) => (\n              <option>{op}</option>\n            ))}\n            ;\n          </select>\n        </div>\n      );\n  }\n  if (value.type === \"number\")\n    return (\n      <div className=\"input_holder\">\n        <label>{key}</label>\n        <input name={ipname} type=\"number\" />\n      </div>\n    );\n  if (value.type === \"date\")\n    return (\n      <div className=\"input_holder\">\n        <label>{key}</label>\n        <input name={ipname} type=\"date\" />\n      </div>\n    );\n  if (value.type === \"color\") {\n    let color = value.color !== undefined ? value.color : \"#000\";\n    return (\n      <div className=\"input_holder\">\n        <label>{key}</label>\n        <input name={ipname} type=\"text\" value={color} />\n        <div\n          style={{ backgroundColor: color, width: \"50px\", height: \"100%\" }}\n        ></div>\n      </div>\n    );\n  }\n  if (value.type === \"file\")\n    return (\n      <div className=\"input_holder\">\n        <label>{key}</label>\n        <input\n          name={ipname}\n          type=\"file\"\n          accept={`${value.extension ? \".\" + value.extension : \"\"}`}\n        />\n      </div>\n    );\n\n  return (\n    <div className=\"input_holder\">\n      <label>{key}</label>\n      <input name={ipname} type=\"text\" />\n    </div>\n  );\n}\n\nfunction App() {\n  const [jsonInput, changejsonInput] = useState({});\n  const [iserror, setError] = useState(false);\n  const handlechange = (ev) => {\n    try {\n      let newJson = JSON.parse(ev.target.value);\n      changejsonInput(newJson);\n      setError(false);\n    } catch (err) {\n      setError(true);\n    }\n  };\n  const handlesubmit = (ev) => {\n    let myFormData = {};\n    let inputs = ev.target.querySelectorAll(\"input\");\n    inputs.forEach((input) => (myFormData[input.name] = input.value));\n    ev.preventDefault();\n    fetch(\"http://localhost:8080/add\", {\n      body: JSON.stringify(myFormData),\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => console.log(res))\n      .catch((err) => console.log(err));\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"Navbar\">\n        <div className=\"Navbar_brand\">Project Raa</div>\n      </div>\n      <div className=\"Container\">\n        <div className=\"Output\">\n          {!iserror && (\n            <form onSubmit={handlesubmit}>\n              {Object.keys(jsonInput).map((key) => {\n                return CorrespondingElement(key, jsonInput[key]);\n              })}\n              {Object.keys(jsonInput).length > 0 && (\n                <button type=\"submit\">Submit</button>\n              )}\n            </form>\n          )}\n          {iserror && <div className=\"error\">Invalid JSON input</div>}\n        </div>\n        <div className=\"Input\">\n          <textarea\n            onChange={handlechange}\n            placeholder=\"Your json input\"\n          >{`{}`}</textarea>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}